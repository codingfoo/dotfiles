functionality to learn/explore
  buffers multiple open files

  bookmarks
  pair completion / electric pair / brace matching

  yaml-mode

  code folding - hides stuff you dont need to read
  line wrap - save from horizontal scrolling
  narrow to region
  window numbering
  rvm
  on save remove trailing whitespace
  project management
  regular expression builder
  lint
  open recent file
   need plugin, or viminfo, Do i need?
  auto save file
   should i use
  undo tree

notes
  pattern
    register
    repeats
    operation
    movement/motion
  help
   <f1>
   :help <topic>
  run command
   : also mapped to ; to avoid the shift key
  print working dir
   :pwd
  change dir
   :cd
  open file
    open any file 
     e:
    open file in project
     ,t command-t
    remote files
     just use scp/ssh syntax
  save file
    :w
  quit
    :q
  selection
    v selection
    V line selection
    c-v block selection - column edit / rectangle mode / block operations
    esc end selection
  edit multiple lines simulataneously
    Use Ctrl+v to select the first column of text in the lines you want to comment.
    Then hit 'I' and type the text you want to insert.
    Then hit 'Esc', wait 1 second and the inserted text will appear on every line 
  syntax highlighting
  repeat command 
    .
  a command typed twice operates on a line eg dd
  macros
    qa start recording macro: a is a register for the macro, 
    q  stop recording
    @a run macro in register a 
    @@ run macro again
    qA append to macro in register a
    :registers command lets you view macros
    save macros
    recursive macros call @a while recording a macro
  registers
    unamed
    numbered
    named
      letters use uppercase letter to append to contents
  windows  
    all prefaced with c-w
    n new window
    v split vertically
    c close
    o close other
    j k l h movement
  navigation
    jklh arrow keys
  deleting
    d delete
  undo/redo
    u undo
    c-R redo
    undo tree on a redo a branch is created
  find
    / search in document
    n next term
    N previous 
  find and replace
    :[range]s/search/replace/ 
    :[range]s/search/replace/c - the c makes it interactive
    [range] % is the whole document, by default just current line
    multiline
    regex by default
  find and replace in files - use args command
    :args app/views/*/*
    :argdo %s/, :expire.*)/)/ge | update 
  completion
    expand tags - part of text prediction
    file templates - just use snippets
    snippets - see snipmate
    text prediction - see supertab
  indentation
    auto indent after brace - smartindent
    new line same as above - autoindent
    indent >>
    unindent << 
  reformatting
    = correct alignment of code
    V= select code and align
  run external command
    :!<command> run external command
    :!<command> % run external command on entire file 
    :r!<command> get results of command and put in buffer
    :'a,'b!<command>   filter through command
